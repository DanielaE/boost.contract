
[/ Copyright (C) 2008-2012 Lorenzo Caminiti ]
[/ Distributed under the Boost Software License, Version 1.0 ]
[/ (see accompanying file LICENSE_1_0.txt or a copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ Home at http://sourceforge.net/projects/contractpp ]

[section Full Table of Contents]

[pre

[link contract__.introduction Introduction]

[link contract__.full_table_of_contents Full Table Of Contents]

[link contract__.getting_started Getting Started]

    [link contract__.getting_started.this_documentation This Documentation]
    [link contract__.getting_started.compilers_and_platforms Compilers and Platforms]
    [link contract__.getting_started.installation Installation]
    [link contract__.getting_started.disable_contract_compilation Disable Contract Compilation]

[link contract__.contract_programming_overview Contract Programming Overview]

    [link contract__.contract_programming_overview.assertions Assertions]
    [link contract__.contract_programming_overview.benefits Benefits]
    [link contract__.contract_programming_overview.costs Costs]
    [link contract__.contract_programming_overview.free_function_calls Free Function Calls]
    [link contract__.contract_programming_overview.member_function_calls Member Function Calls]
    [link contract__.contract_programming_overview.constructor_calls Constructor Calls]
    [link contract__.contract_programming_overview.destructor_calls Destructor Calls]
    [link contract__.contract_programming_overview.constant_correctness Constant-Correctness]
    [link contract__.contract_programming_overview.specification_vs__implementation Specification vs. Implementation]
    [link contract__.contract_programming_overview.broken_contracts Broken Contracts]
    [link contract__.contract_programming_overview.features Features]

[link contract__.tutorial Tutorial]

    [link contract__.tutorial.free_functions Free Functions]
    [link contract__.tutorial.preconditions Preconditions]
    [link contract__.tutorial.postconditions__result_and_old_values_ Postconditions (Result and Old Values)]
    [link contract__.tutorial.classes_and_class_invariants Classes and Class Invariants]
    [link contract__.tutorial.constructors Constructors]
    [link contract__.tutorial.destructors Destructors]
    [link contract__.tutorial.member_functions Member Functions]
    [link contract__.tutorial.inheritance_and_subcontracting Inheritance and Subcontracting]
    [link contract__.tutorial.class_templates Class Templates]
    [link contract__.tutorial.function_templates Function Templates]
    [link contract__.tutorial.forward_declarations_and_body_definitions Forward Declarations and Body Definitions]

[link contract__.advanced_topics Advanced Topics]

    [link contract__.advanced_topics.commas_and_leading_symbols_in_macros Commas and Leading Symbols in Macros]
    [link contract__.advanced_topics.static_assertions Static Assertions]
    [link contract__.advanced_topics.constant_assertions Constant Assertions]
    [link contract__.advanced_topics.select_assertions Select Assertions]
    [link contract__.advanced_topics.assertion_statements Assertion Statements]
    [link contract__.advanced_topics.assertion_requirements Assertion Requirements]
    [link contract__.advanced_topics.old_of_requirements Old-Of Requirements]
    [link contract__.advanced_topics.old_and_result_value_copies Old and Result Value Copies]
    [link contract__.advanced_topics.pure_virtual_functions Pure Virtual Functions]
    [link contract__.advanced_topics.subcontracting_preconditions Subcontracting Preconditions]
    [link contract__.advanced_topics.static_member_functions Static Member Functions]
    [link contract__.advanced_topics.volatile_member_functions Volatile Member Functions]
    [link contract__.advanced_topics.operators Operators]
    [link contract__.advanced_topics.nested_classes Nested Classes]
    [link contract__.advanced_topics.friends Friends]
    [link contract__.advanced_topics.template_specializations Template Specializations]
    [link contract__.advanced_topics.exception_specifications_and_function_try_blocks Exception Specifications and Function-Try Blocks]
    [link contract__.advanced_topics.specifying_types__no_boost_typeof_ Specifying Types (no Boost.Typeof)]
    [link contract__.advanced_topics.block_invariants_and_loop_variants Block Invariants and Loop Variants]
    [link contract__.advanced_topics.contract_broken_handlers__throw_on_failure_ Contract Broken Handlers (Throw on Failure)]

[link contract__.virtual_specifiers Virtual Specifiers]

    [link contract__.virtual_specifiers.final_classes Final Classes]
    [link contract__.virtual_specifiers.final_member_functions Final Member Functions]
    [link contract__.virtual_specifiers.overriding_member_functions Overriding Member Functions]
    [link contract__.virtual_specifiers.new_member_functions New Member Functions]

[link contract__.concepts Concepts]

    [link contract__.concepts.class_templates Class Templates]
    [link contract__.concepts.function_templates Function Templates]
    [link contract__.concepts.concept_definitions__not_implemented_ Concept Definitions (Not Implemented)]

[link contract__.named_parameters Named Parameters]

    [link contract__.named_parameters.overview Overview]
    [link contract__.named_parameters.named_function_parameters Named Function Parameters]
    [link contract__.named_parameters.deduced_function_parameters Deduced Function Parameters]
    [link contract__.named_parameters.member_function_parameters Member Function Parameters]
    [link contract__.named_parameters.constructor_parameters Constructor Parameters]
    [link contract__.named_parameters.class_template_parameters Class Template Parameters]
    [link contract__.named_parameters.concepts Concepts]
    [link contract__.named_parameters.parameter_identifiers Parameter Identifiers]

[link contract__.examples Examples]

    [link contract__.examples.__n1962___vector__comparison_with_c___proposed_syntax \[N1962\] Vector: Comparison with C++ proposed syntax]
    [link contract__.examples.__n1962___circle__subcontracting \[N1962\] Circle: Subcontracting]
    [link contract__.examples.__n1962___factorial__recursion_and_assertion_computational_complexity \[N1962\] Factorial: Recursion and assertion computational complexity]
    [link contract__.examples.__n1962___equal__operators \[N1962\] Equal: Operators]
    [link contract__.examples.__n1962___sum__separated_body_definitions \[N1962\] Sum: Separated body definitions]
    [link contract__.examples.__n1962___square_root__default_parameters_and_comparison_with_d_syntax \[N1962\] Square Root: Default parameters and comparison with D syntax]
    [link contract__.examples.__n1962___block__block_invariants \[N1962\] Block: Block invariants]
    [link contract__.examples.__n2081___add__generic_addition_algorithm \[N2081\] Add: Generic addition algorithm]
    [link contract__.examples.__n2081___advance__concept_based_iterator_overloading__emulated_using_tags_ \[N2081\] Advance: Concept-based iterator overloading (emulated using tags)]
    [link contract__.examples.__n2081___find__generic_find_algorithm \[N2081\] Find: Generic find algorithm]
    [link contract__.examples.__n2081___apply__overloaded_invocation_of_functors \[N2081\] Apply: Overloaded invocation of functors]
    [link contract__.examples.__n2081___for_each__generic_for_each_algorithm \[N2081\] For Each: Generic for-each algorithm]
    [link contract__.examples.__n2081___transform__generic_binary_transformation_algorithm \[N2081\] Transform: Generic binary transformation algorithm]
    [link contract__.examples.__n2081___count__generic_counting_algorithm \[N2081\] Count: Generic counting algorithm]
    [link contract__.examples.__n2081___convert__conversion_between_two_types \[N2081\] Convert: Conversion between two types]
    [link contract__.examples.__n2081___equal__generic_equality_comparison \[N2081\] Equal: Generic equality comparison]
    [link contract__.examples.__n2081___less_equal__generic_less_than_or_equal_to_comparison \[N2081\] Less Equal: Generic less-than or equal-to comparison]
    [link contract__.examples.__n2081___de_ref__generic_iterator_dereferencing \[N2081\] De-Ref: Generic iterator dereferencing]
    [link contract__.examples.__n2081___min__generic_minimum_algorithm \[N2081\] Min: Generic minimum algorithm]
    [link contract__.examples.__meyer97___stack4__comparison_with_eiffel_syntax \[Meyer97\] Stack4: Comparison with Eiffel Syntax]
    [link contract__.examples.__meyer97___stack3__error_codes_instead_of_preconditions \[Meyer97\] Stack3: Error codes instead of preconditions]
    [link contract__.examples.__meyer97___gcd__loop_variants_and_invariants_plus_comparison_with_eiffel_syntax \[Meyer97\] GCD: Loop variants and invariants plus comparison with Eiffel syntax]
    [link contract__.examples.__meyer97___max_array__nested_loop_variants_and_invariants \[Meyer97\] Max-Array: Nested loop variants and invariants]
    [link contract__.examples.__mitchell02___name_list__relaxed_subcontracts \[Mitchell02\] Name List: Relaxed subcontracts]
    [link contract__.examples.__mitchell02___dictionary__simple_key_value_map \[Mitchell02\] Dictionary: Simple key-value map]
    [link contract__.examples.__mitchell02___courier__subcontracting_and_static_class_invariants \[Mitchell02\] Courier: Subcontracting and static class invariants]
    [link contract__.examples.__mitchell02___stack__simple_stack_dispenser \[Mitchell02\] Stack: Simple stack dispenser]
    [link contract__.examples.__mitchell02___simple_queue__simple_queue_dispenser \[Mitchell02\] Simple Queue: Simple queue dispenser]
    [link contract__.examples.__mitchell02___customer_manager__contracts_instead_of_defensive_programming \[Mitchell02\] Customer Manager: Contracts instead of Defensive Programming]
    [link contract__.examples.__mitchell02___observer__contracts_for_pure_virtual_functions \[Mitchell02\] Observer: Contracts for pure virtual functions]
    [link contract__.examples.__mitchell02___counter__subcontracting_and_virtual_specifiers__final__override__new__and_pure_virtual_ \[Mitchell02\] Counter: Subcontracting and virtual specifiers (final, override, new, and pure virtual)]
    [link contract__.examples.__stroustrup97___string__throw_when_contract_is_broken \[Stroustrup97\] String: Throw when contract is broken]
    [link contract__.examples.__cline90___vector__comparison_with_a___proposed_syntax \[Cline90\] Vector: Comparison with A++ proposed syntax]
    [link contract__.examples.__cline90___stack__function_try_blocks_and_exception_specifications \[Cline90\] Stack: Function-Try blocks and exception specifications]
    [link contract__.examples.__cline90___vector_stack__subcontracting_from_abstract_data_type__adt_ \[Cline90\] Vector-Stack: Subcontracting from Abstract Data Type (ADT)]
    [link contract__.examples.__cline90___calendar__a_very_simple_calendar \[Cline90\] Calendar: A very simple calendar]

[link contract__.grammar Grammar]

    [link contract__.grammar.preprocessor_dsel Preprocessor DSEL]
    [link contract__.grammar.differences_with_c___syntax Differences with C++ Syntax]
    [link contract__.grammar.macro_interface Macro Interface]
    [link contract__.grammar.lexical_conventions Lexical Conventions]
    [link contract__.grammar.class_declarations Class Declarations]
    [link contract__.grammar.base_classes Base Classes]
    [link contract__.grammar.template_specializations Template Specializations]
    [link contract__.grammar.template_parameters Template Parameters]
    [link contract__.grammar.concepts Concepts]
    [link contract__.grammar.types Types]
    [link contract__.grammar.function_declarations Function Declarations]
    [link contract__.grammar.result_type Result Type]
    [link contract__.grammar.function_and_operator_names Function and Operator Names]
    [link contract__.grammar.exception_specifications Exception Specifications]
    [link contract__.grammar.member_initializers Member Initializers]
    [link contract__.grammar.function_parameters Function Parameters]
    [link contract__.grammar.result_and_old_values Result and Old Values]
    [link contract__.grammar.class_invariants Class Invariants]
    [link contract__.grammar.assertions Assertions]
    [link contract__.grammar.loop_variants Loop Variants]
    [link contract__.grammar.named_parameter_declarations Named Parameter Declarations]
    [link contract__.grammar.terminals Terminals]
    [link contract__.grammar.alternative_assertion_syntax__not_implemented_ Alternative Assertion Syntax (Not Implemented)]

[link contract__.no_variadic_macros No Variadic Macros]

    [link contract__.no_variadic_macros.sequence_syntax Sequence Syntax]
    [link contract__.no_variadic_macros.commas_and_leading_symbols_in_macros Commas and Leading Symbols in Macros]

[link reference Reference]

    [funcref    contract::block_invariant_broken]
    [classref   contract::broken]
    [classref   contract::broken_contract_handler]
    [funcref    contract::class_invariant_broken_on_entry]
    [funcref    contract::class_invariant_broken_on_exit]
    [funcref    contract::class_invariant_broken_on_throw]
    [classref   contract::copy]
    [enumref    contract::from]
    [classref   contract::has_oldof]
    [funcref    contract::loop_variant_broken]
    [funcref    contract::postcondition_broken]
    [funcref    contract::precondition_broken]
    [funcref    contract::set_block_invariant_broken]
    [funcref    contract::set_class_invariant_broken]
    [funcref    contract::set_class_invariant_broken_on_entry]
    [funcref    contract::set_class_invariant_broken_on_exit]
    [funcref    contract::set_class_invariant_broken_on_throw]
    [funcref    contract::set_loop_variant_broken]
    [funcref    contract::set_postcondition_broken]
    [funcref    contract::set_precondition_broken]
    [macroref   CONTRACT_BLOCK_INVARIANT]
    [macroref   CONTRACT_BLOCK_INVARIANT_TPL]
    [macroref   CONTRACT_CLASS]
    [macroref   CONTRACT_CLASS_INVARIANT]
    [macroref   CONTRACT_CLASS_INVARIANT_TPL]
    [macroref   CONTRACT_CLASS_TPL]
    [macroref   CONTRACT_CONFIG_ARRAY_DIMENSION_MAX]
    [macroref   CONTRACT_CONFIG_DO_NOT_SUBCONTRACT_PRECONDITIONS]
    [macroref   CONTRACT_CONFIG_FUNCTION_ARITY_MAX]
    [macroref   CONTRACT_CONFIG_INHERITANCE_MAX]
    [macroref   CONTRACT_CONFIG_NO_BLOCK_INVARIANTS]
    [macroref   CONTRACT_CONFIG_NO_CLASS_INVARIANTS]
    [macroref   CONTRACT_CONFIG_NO_LOOP_VARIANTS]
    [macroref   CONTRACT_CONFIG_NO_POSTCONDITIONS]
    [macroref   CONTRACT_CONFIG_NO_PRECONDITIONS]
    [macroref   CONTRACT_CONFIG_OLDOF_MAX]
    [macroref   CONTRACT_CONFIG_PRECONDITIONS_DISABLE_NO_ASSERTION]
    [macroref   CONTRACT_CONFIG_REPORT_BASE_PRECONDITION_FAILURE]
    [macroref   CONTRACT_CONFIG_THREAD_SAFE]
    [macroref   CONTRACT_CONSTRUCTOR]
    [macroref   CONTRACT_CONSTRUCTOR_ARG]
    [macroref   CONTRACT_CONSTRUCTOR_BODY]
    [macroref   CONTRACT_CONSTRUCTOR_TPL]
    [macroref   CONTRACT_DESTRUCTOR]
    [macroref   CONTRACT_DESTRUCTOR_BODY]
    [macroref   CONTRACT_DESTRUCTOR_TPL]
    [macroref   CONTRACT_FREE_BODY]
    [macroref   CONTRACT_FUNCTION]
    [macroref   CONTRACT_FUNCTION_TPL]
    [macroref   CONTRACT_LIMIT_CONSTRUCTOR_TRY_BLOCK_CATCHES]
    [macroref   CONTRACT_LIMIT_NESTED_SELECT_ASSERTIONS]
    [macroref   CONTRACT_LIMIT_OLDOFS]
    [macroref   CONTRACT_LOOP]
    [macroref   CONTRACT_LOOP_VARIANT]
    [macroref   CONTRACT_LOOP_VARIANT_TPL]
    [macroref   CONTRACT_MEMBER_BODY]
    [macroref   CONTRACT_OLDOF]
    [macroref   CONTRACT_PARAMETER]
    [macroref   CONTRACT_PARAMETER_BODY]
    [macroref   CONTRACT_PARAMETER_TYPEOF]
    [macroref   CONTRACT_TEMPLATE_PARAMETER]

[link contract__.release_notes Release Notes]

    [link contract__.release_notes.release_0_4_0 Release 0.4.0]
    [link contract__.release_notes.release_0_3_490 Release 0.3.490]
    [link contract__.release_notes.release_0_3_469 Release 0.3.469]
    [link contract__.release_notes.release_0_2_190 Release 0.2.190]
    [link contract__.release_notes.release_0_1_126 Release 0.1.126]
    [link contract__.release_notes.release_0_1_55 Release 0.1.55]
    [link contract__.release_notes.release_0_1_50 Release 0.1.50]

[link contract__.bibliography Bibliography]

[link contract__.acknowledgments Acknowledgments]

]

[endsect]

