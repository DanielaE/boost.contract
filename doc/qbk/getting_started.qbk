
[section Getting Started]

This section illustrates how to setup your system to use this library.

[section Installation]

This library requires the __Boost_MPL__ and __Boost_Preprocessor__ libraries.
The __Boost__ library is a collection of highly portable C++ libraries.
You should be able to download, compile, and install __Boost__ for your operating system from the __Boost__ website.
Precompiled __Boost__ installation packages are also available for most common operating systems and they might already be installed on your system.

This library is composed of header files only.
Therefore there are no library precompiled object files which need to be installed.
Just instruct your C++ compiler where to find the library header files (e.g., using the '-I' option for GCC or '/I' for MSVC).
For example, if you have uncompressed the library files in a directory named `"$HOME/libs/contractpp/"` then you can compile with GCC using:

[pre
'''$ g++ -I$HOME/libs/contractpp/src/ ...'''
]
    
Note that the path of the library source files (contained in the `"src/"` subdirectory) is specified.

[endsect]
[section Header Files]

The library headers are simply included in your C++ source code as follow:

    #include <contract.hpp>

In general, there is no need to include the header files from the ="contract/"= directory separately and the one include above is enough.
In this documentation, the `#include <contract.hpp>` will occasionally be assumed and omitted from the example code.

[endsect]
[section Control Contract Compilation]

This library provides the following macro symbols to selectively turn on or off contract compilation and run-time checking:

* *Block invariants* and *loop variants* are compiled and checked only if the `__CONTRACT_CHECK_BLOCK_INVARIANT__` is #defined. By default, this macro symbol is /not/ #defined.
* *Class invariants* are compiled and checked only if the `__CONTRACT_CHECK_CLASS_INVARIANT__` is #defined. By default, this macro symbol is /not/ #defined.
* *Preconditions* are compiled and checked only if the `__CONTRACT_CHECK_PRECONDITION__` is #defined. By default, this macro symbol is /not/ #defined.
* *Postconditions* are compiled and checked only if the `__CONTRACT_CHECK_POSTCONDITION__` is #defined. By default, this macro symbol is /not/ #defined. In addition, the library copies variables to support old values in postconditions only when `__CONTRACT_CHECK_POSTCONDITION__` is #defined (in this case, these extra copy operations will introduce some run-time overhead).

[important *Contracts Off by Default*

All these symbols are #undefined by default so you must define them when compiling otherwise the library will do nothing.]

In Contract Programming, it is usually important to be able to selectively turn off compilation of invariants, preconditions, and/or postconditions for the sake of run-time efficiency and to reduce the size of the compiled object code.

These macros must be #defined before the library /first/ #include.
Your compiler options to #define macros can be used to this purpose ("-D" and "-U" for GCC, "/D" and "/U" for Microsoft Visual C++, etc).

For example, let's assume we only want to check class invariants and preconditions but no postconditions and block invariants.
Then we have to #define `__CONTRACT_CHECK_CLASS_INVARIANT__` and `__CONTRACT_CHECK_PRECONDITION__` but leave `__CONTRACT_CHECK_POSTCONDITION__` and `__CONTRACT_CHECK_BLOCK_INVARIANT__` #undefined.
If we are using the GCC compiler, we can do this using the following command line options:

[pre
$ g++ -DCONTRACT_CHECK_CLASS_INVARIANT -DCONTRACT_CHECK_PRECONDITION
  -UCONTRACT_CHECK_POSTCONDITION -UCONTRACT_CHECK_BLOCK_INVARIANT ...
]

[endsect]
[section Names and Symbols]

All library names are defined within the `contract` namespace.
All library macros start with the `CONTRACT` prefix.
Any library names, macros, files, directories, etc that end with an underscore "`_`" are library implementation specific and should /not/ be used directly in user code by programmers.

This library needs to /augment/ the user code with special symbols to implement the contracts.
These symbols need to be defined within the user code namespace.
All these symbols start with the `contract` prefix and end with an underscore "`_`" to prevent name clashes with user code. Again, these symbols end with an underscore "`_`" so they are library implementation specific and should /not/ be used directly in user code by programmers.

Finally, all library names in the `contract::aux` namespace and symbols starting with `CONTRACT_AUX` are also library implementation specific and should /not/ be used directly in user code by programmers.

[endsect]
[section Compile-Time Configuration]

Some of the library behaviour can be changed at compile-time #defining special /configuration macros/ (`__CONTRACT_CONFIG_MAX_FUNCTION_ARITY__`, `__CONTRACT_CONFIG_MAX_MULTIPLE_INHERITANCE__`, etc).
If configuration macros are not #defined, the library will use appropriate default values for them.

The library configuration macros can be #defined using your compiler options similarly to what discussed above.
However, it is strongly recommended /not/ to change the library compile-time configuration unless strictly necessary.

[endsect]
[endsect]

