
[/ Copyright (C) 2008-2012 Lorenzo Caminiti ]
[/ Distributed under the Boost Software License, Version 1.0 ]
[/ (see accompanying file LICENSE_1_0.txt or a copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ Home at http://sourceforge.net/projects/contractpp ]

[section Getting Started]

This section explains how to get oriented in order to start using this library.

[section This Documentation]

Programmers should have enough knowledge to use this library after reading the __Introduction__, __Getting_Started__, and __Tutorial__ sections.
The other sections can be consulted to gain a more in depth knowledge of the library.

Some footnotes are marked by the word "*Rationale*".
These explain reasons behind decisions made during the design and implementation of this library.

In most of the examples presented in this documentation the Boost.Detail/LightweightTest macroo `BOOST_TEST` and `BOOST_TEST_EQ` are used to test predicates and equality conditions respectively.
These macros are conceptually similar to C-style `assert` macro but they exit the program with a non-zero exit code via `boost::report_errors`, instead of aborting the program.
See =boost/detail/lightweight_test.hpp= for more information.
[footnote
*Rationale.*
Using Boost.Detail/LightweightTest allows to add the examples from this documentation to the library regression tests so to make sure that they always compile and run correctly.
Technically, Boost.Detail/LightweightTest is part of __Boost__'s non-public API so it should not be directly used by users outside __Boost__ (see __Boost_Test__ instead), but it is common practice to use it in the development and testing of other libraries like this one.
]

[endsect]

[section Compilers and Platforms]

In general, this library requires a C++ compiler with a sound support of __SFINAE__ and other template meta-programming techniques as per the __CXX03__ standard.
See the __Without_CXX11__ section for information on how to use this library without __CXX11__ features:

* In theory, it is possible to use this library without __CXX11__ lambda functions.
However, in that case a large amount of boiler-plate code is required to program separate functions to specify preconditions and postconditions (so using this library without __CXX11__ lambda functions is not recommended).
* It is possible to use this library without __CXX11__ (or __CXX99__) variadic macros.
In this case, some (smaller) amount of boiler-plate code is required to manually program the code otherwise expanded by the variadic macros.
* It is always possible to use this library without __CXX11__ auto declarations.
Most of the examples in this documentation use auto declarations only for simplicity and because they make the code more readable.

The authors originally developed and tested this library on:

* __Clang__ 3.4.2 on Cygwin (with __CXX11__ features enabled =-std=c++11=).
* _GCC__ 4.8.3 on Cygwin (with __CXX11__ features enabled =-std=c++11=).
* Microsoft Visual C++ (__MSVC__) 10.0 on Windows.

At present, this library has not been tested on other compilers or platforms.

[endsect]

[section Files and Names]

The directory structure of this library's files is as follow:


[pre
doc/
    html/               # This documentation.
example/                # Examples (including the ones listed in this documentation).
include/                # Header files.
    boost/
        contract.hpp
        contract/
            core/
            aux_/
test/                   # Tests.
]

All headers required by this library can be included at once by:

    #include <boost/contract.hpp>

Alternatively, all headers =boost/contract/*.hpp= are independent from one another and they can selectively included one at the time based on the specific API required from this library.
Headers in =boost/contract/core/= are also part of this library public API but they are not independent from other public headers (in general, these headers will be automatically included by including other public headers of this library).

Header files in =boost/contract/aux_/=, names in the `boost::contract::aux` namespace, names starting with `boost_contract_aux...` and `BOOST_CONTRACT_AUX...` in any namespace are all part of this library private API and should never be used directly in user code.

Names starting with `BOOST_CONTRACT_ERROR...` are used by this library to report compile-time errors (so spotting these names in error messages reported by the compiler might help in resolving errors).

[endsect]


[section Installation]

TODO

[endsect]

[section Disable Contract Compilation]

Some behaviour of this library can be customized at compile-time by defining special /configuration macros/ (see [headerref boost/contract/config.hpp]).

In particular, defining the macros [macroref BOOST_CONTRACT_NO_PRECONDITIONS], [macroref BOOST_CONTRACT_NO_POSTCONDITIONS], and [macroref BOOST_CONTRACT_NO_INVARIANTS] disables run-time checking of all preconditions, postconditions, and class invariants respectively.
By default, all contracts are checked at run-time (i.e., all these macros are not defined).

[endsect]

[endsect]

