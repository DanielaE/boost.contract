
/**

@page Errors Annex: Compile-Time Errors

This section presents a (not complete) list of common compile-time errors
that might be encountered when compiling contracts.

Some incorrect uses of the library are checked at compile-time (using
@ref Boost "Boost.MPL" static assertions) and they generate compiler error
messages containing text of the form @c DBC_ERROR_... .

This library heavily uses templates. Usually, compiler errors for C++ templates
are somewhat difficult to understand because of the genericity of the template
mechanism and related errors.

This library uses code blocks passed as macro parameters (e.g., body,
preconditions, postconditions, invariants). When a code block is passed as a
single macro parameter, the compiler interprets it as being on a single line
and error line numbers loose quite a bit of their usefulness. To limit this
situation, it is strongly suggested to keep the contract code simple (so the
errors can be found easily even if the line numbers are not exact) and to
@ref Separating_Declaration_and_Definition "separate" contract declarations
from body definitions (so complex body implementation code is separate from the
contract, it is not passed as a single macro parameter, and complier error line
numbers will be exact).

The error messages presented here refer to the format used by the
@c g++ 4.2.4 C++ compiler. Other C++ compilers may generate different error
messages but the cause of the error should still apply.

<dl>
<dt><c>warning: ‘class dbc::fun<...>...’ is already a friend of ‘...’</c>
    <dd>This is the only warning generated by the library that should be
        ignored.@n
        This is due to the macro-based API automatically specifying the same
        contract type as friend more than one time across different member
        functions. @n 
        If your complier selectively allows to turn this warning off, you can
        safely do so and then compile with warning threated as errors
        (@c -Werror option for @c g++). Unfortunately, @c g++ 4.2.4 does not
        yet support to turn this warning off (future @c g++ versions might
        support this via <c>\#pragma GCC diagnostic ignored "-W..."</c>)
        so the @c -Werror option cannot be used (but this is the only warning 
        generated by this library that should be ignored).
<dt><dd>@n
<dt><c>error: ‘dbc_invariant_’ was not declared in this scope</c>
    <dd>Did you forget to add @c DBC_INVARIANT() at the end of the class?
<dt><dd>@n
<dt><c>error: ‘mem’ is not a template</c>
    <dd>Make sure @c class_type is specified to be a template using the 
        @c template keyword: for the macro-based API use
        <c>(template)(class_type)</c>, for the code-based API use
        <c>dbc::fun<>::mem::template class_type</c>.
<dt><dd>@n
<dt><c>error: invalid use of non-static data member ‘...’</c>
    <dd>Did you forget to use @c self?
<dt><dd>@n
<dt><c>error: no match for ‘...’ in ‘...’</c>
    <dd>Did you forget <c>.now</c> or <c>.old</c> in postconditions on either
        @c self or a function argument?
<dt><dd>@n
<dt><c>error: ‘...’ has no member named ‘old’</c>
    <dd>Are you using <c>.old</c> on either @c self or a function argument
        without specifying it @c DBC_COPYABLE() (or @c dbc::copyable) in the
        contract signature?
<dt><dd>@n
<dt><c>error: macro "DBC_..." passed ... arguments, but takes just ...</c>
    <dd>Does one or more passed macro parameter contain a comma "," not wrapped
        in parenthesis "()"? If so, use @c DBC_MPARAM().
<dt><dd>@n
<dt><c>.../post.hpp:... error: cannot allocate an object of abstract type ‘...’</c>
    <dd>Did you specified an abstract type copyable? (Abstract types, with one
        or more pure virtual function, cannot be allocated and therefore they
        cannot be copied.)
<dt><c>error: ...DBC_ERROR_class_must_privately_inherit_from_dbc_object_...</c>
    <dd>Did you forget to inherit (privately) from @c dbc::object? If so, use
        @c DBC_INHERIT_OBJECT() or @c DBC_MULTI_INHERIT_OBJECT().
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_missing_function_name_...</c>
    <dd>Did you forget to specify the @c function_name
        in @a signature argument of @c DBC_MEM_FUN()?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_missing_function_arguments_...</c>
    <dd>Did you forget to specify the function arguments
        in @a signature argument of @c DBC_MEM_FUN() or similar macro?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_missing_class_type_...</c>
    <dd>Did you forget to specify the @c class_type
        in @a signature argument of @c DBC_MEM_FUN() or similar macro?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_class_type_cannot_be_specified_copyable_in_this_context_...</c>
    <dd>Did you specified @c DBC_COPYABLE() (or @c dbc::copyable) the class
        type for a constructor or destructor?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_missing_base_class_type_in_DBC_BASE_specifier_...</c>
    <dd>Did you forget to specify the @c class_type in @c DBC_BASE()?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_constructors_may_not_be_cv_qualified_...</c>
    <dd>Did you specify constructor function @c const?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_constructor_cannot_have_return_value_not_even_void_...</c>
    <dd>Did you attempt to specify @c void as return value for a constructor?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_return_type_specification_for_constructor_invalid_...</c>
    <dd>Did you attempt to specify a return value for a constructor?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_destructors_may_not_be_cv_qualified_...</c>
    <dd>Did you specify destructor function @c const?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_return_type_specification_for_destructor_invalid_...</c>
    <dd>Did you attempt to specify a return value for a destructor?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_class_type_C_must_be_a_class_...</c>
    <dd>Did you specified a non-class type (e.g., @c int, @c float, etc) as
        class type?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_base_contract_type_B_must_be_a_class_,...</c>
    <dd>Did you specified a non-class type (e.g., @c int, @c float, etc) as
        the base contract class type?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_class_type_cannot_be_specified_copyable_in_constructor_...</c>
    <dd>Did you specified @c DBC_COPYABLE() (or @c dbc::copyable) the class
        type for a constructor?
<dt><dd>@n
<dt><c>error: ...DBC_ERROR_class_type_cannot_be_specified_copyable_in_destructor_...</c>
    <dd>Did you specified @c DBC_COPYABLE() (or @c dbc::copyable) the class
        type for a destructor?
<dt><dd>@n
<dt><c>error: expected unqualified-id before '{' token
    <dd>Do you have a ';' between the function signature and the DBC function
        contract macro?
<dt><dd>@n
<dt><c>error: redefinition of '...'
       error: '...' previously defined here
    <dd>Did you forget to use DBC_BODY?
</dl>
<dt><dd>@n
<dt><c>error: '...' is not a type
    <dd>Is the class a template and if so, did you specify it as such using the
    "(template)" keyword in the macro API?
</dl>

*/

