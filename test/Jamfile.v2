
test-suite constructor :
    [ subdir-run constructor : bases ]
    [ subdir-run constructor : body_throw ]
    [ subdir-compile-fail constructor : no_pre-error ]
;

test-suite destructor :
    [ subdir-run destructor : bases ]
    [ subdir-run destructor : body_throw ]
    [ subdir-compile-fail destructor : no_pre-error ]
;

test-suite public_function :
    [ subdir-run public_function : bases ]
    [ subdir-run public_function : bases_virtual ]
    [ subdir-run public_function : bases_branch ]
    [ subdir-run public_function : body_throw ]
    [ subdir-run public_function : static ]
    [ subdir-run public_function : static_body_throw ]
;

test-suite function :
    [ subdir-run function : pre_post ]
    [ subdir-run function : body_throw ]
;

test-suite old :
    [ subdir-run oldof : no_macros ]
    [ subdir-run oldof : auto ]
    [ subdir-compile-fail oldof : no_make_old-error ]
;

test-suite disable :
    [ subdir-run disable : checking ]
;

test-suite set :
    [ subdir-run set : nothing ]
    [ subdir-run set : only_pre ]
    [ subdir-run set : only_old ]
    [ subdir-run set : only_post ]
    [ subdir-run set : both_pre_old ]
    [ subdir-run set : both_old_post ]
    [ subdir-run set : both_pre_post ]
    [ subdir-run set : all_pre_old_post ]
    [ subdir-compile-fail set : old_pre-error ]
    [ subdir-compile-fail set : post_old-error ]
    [ subdir-compile-fail set : post_pre-error ]
;

test-suite call_if :
    [ subdir-run call_if : true_ ]
    [ subdir-run call_if : false_ ]
    [ subdir-run call_if : true_void ]
    [ subdir-run call_if : false_void ]
    [ subdir-run call_if : equal_to ]
;

# C++14 supported only by Clang... so in its own suite and explicit.
test-suite cxx14 :
    [ subdir-run call_if : equal_to_cxx14 :
            <toolset>clang:<cxxflags>-std=c++1y ]
    [ subdir-run call_if : advance_cxx14 :
            <toolset>clang:<cxxflags>-std=c++1y ]
;
explicit cxx14 ;

