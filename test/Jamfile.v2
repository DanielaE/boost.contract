
# Copyright (C) 2008-2017 Lorenzo Caminiti
# Distributed under the Boost Software License, Version 1.0 (see accompanying
# file LICENSE_1_0.txt or a copy at http://www.boost.org/LICENSE_1_0.txt).
# See: http://www.boost.org/doc/libs/release/libs/contract/doc/html/index.html

import ../build/boost_contract_build ;

test-suite constructor :
    [ boost_contract_build.subdir-run constructor : smoke ]

    [ boost_contract_build.subdir-run constructor : decl_pre_all ]
    [ boost_contract_build.subdir-run constructor : decl_pre_ends ]
    [ boost_contract_build.subdir-run constructor : decl_pre_mid ]
    [ boost_contract_build.subdir-run constructor : decl_pre_none ]
    
    [ boost_contract_build.subdir-run constructor : decl_post_all ]
    [ boost_contract_build.subdir-run constructor : decl_post_ends ]
    [ boost_contract_build.subdir-run constructor : decl_post_mid ]
    [ boost_contract_build.subdir-run constructor : decl_post_none ]
    
    [ boost_contract_build.subdir-run constructor : decl_entry_static_inv_all ]
    [ boost_contract_build.subdir-run constructor : decl_entry_static_inv_ends ]
    [ boost_contract_build.subdir-run constructor : decl_entry_static_inv_mid ]
    [ boost_contract_build.subdir-run constructor : decl_entry_static_inv_none ]
    
    [ boost_contract_build.subdir-run constructor : decl_exit_static_inv_all ]
    [ boost_contract_build.subdir-run constructor : decl_exit_static_inv_ends ]
    [ boost_contract_build.subdir-run constructor : decl_exit_static_inv_mid ]
    [ boost_contract_build.subdir-run constructor : decl_exit_static_inv_none ]
    
    # No decl_entry_static_inv_... for constructors.

    [ boost_contract_build.subdir-run constructor : decl_exit_inv_all ]
    [ boost_contract_build.subdir-run constructor : decl_exit_inv_ends ]
    [ boost_contract_build.subdir-run constructor : decl_exit_inv_mid ]
    [ boost_contract_build.subdir-run constructor : decl_exit_inv_none ]
    
    [ boost_contract_build.subdir-run constructor : access ]
    
    [ boost_contract_build.subdir-run constructor : ifdef ]
    [ boost_contract_build.subdir-run constructor : ifdef_macro ]

    [ boost_contract_build.subdir-run constructor : throwing_pre ]
    [ boost_contract_build.subdir-run constructor : throwing_old ]
    [ boost_contract_build.subdir-run constructor : throwing_body ]
    [ boost_contract_build.subdir-run constructor : throwing_post ]
    # No throwing_except test (because throwing twice calls terminate).
    
    [ boost_contract_build.subdir-compile-fail constructor : pre_error ]
;

test-suite destructor :
    [ boost_contract_build.subdir-run destructor : smoke ]

    # No decl_pre_... for destructors.
    
    [ boost_contract_build.subdir-run destructor : decl_post_all ]
    [ boost_contract_build.subdir-run destructor : decl_post_ends ]
    [ boost_contract_build.subdir-run destructor : decl_post_mid ]
    [ boost_contract_build.subdir-run destructor : decl_post_none ]
    
    [ boost_contract_build.subdir-run destructor : decl_entry_static_inv_all ]
    [ boost_contract_build.subdir-run destructor : decl_entry_static_inv_ends ]
    [ boost_contract_build.subdir-run destructor : decl_entry_static_inv_mid ]
    [ boost_contract_build.subdir-run destructor : decl_entry_static_inv_none ]
    
    [ boost_contract_build.subdir-run destructor : decl_exit_static_inv_all ]
    [ boost_contract_build.subdir-run destructor : decl_exit_static_inv_ends ]
    [ boost_contract_build.subdir-run destructor : decl_exit_static_inv_mid ]
    [ boost_contract_build.subdir-run destructor : decl_exit_static_inv_none ]
    
    [ boost_contract_build.subdir-run destructor : decl_entry_inv_all ]
    [ boost_contract_build.subdir-run destructor : decl_entry_inv_ends ]
    [ boost_contract_build.subdir-run destructor : decl_entry_inv_mid ]
    [ boost_contract_build.subdir-run destructor : decl_entry_inv_none ]

    # No decl_exit_inv_... for destructors.
    
    [ boost_contract_build.subdir-run destructor : access ]

    [ boost_contract_build.subdir-run destructor : ifdef ]
    [ boost_contract_build.subdir-run destructor : ifdef_macro ]

    # No throwing_pre test (because dtors have no preconditions).
    [ boost_contract_build.subdir-run destructor : throwing_old ]
    [ boost_contract_build.subdir-run destructor : throwing_body ]
    [ boost_contract_build.subdir-run destructor : throwing_post ]
    # No throwing_except test (because throwing twice calls terminate).

    [ boost_contract_build.subdir-compile-fail destructor : pre_error ]
;

test-suite public_function :
    [ boost_contract_build.subdir-run public_function : smoke ]

    [ boost_contract_build.subdir-run public_function : decl_pre_all ]
    [ boost_contract_build.subdir-run public_function : decl_pre_ends ]
    [ boost_contract_build.subdir-run public_function : decl_pre_mid ]
    [ boost_contract_build.subdir-run public_function : decl_pre_none ]

    [ boost_contract_build.subdir-run public_function : decl_post_all ]
    [ boost_contract_build.subdir-run public_function : decl_post_ends ]
    [ boost_contract_build.subdir-run public_function : decl_post_mid ]
    [ boost_contract_build.subdir-run public_function : decl_post_none ]
    
    [ boost_contract_build.subdir-run public_function :
            decl_entry_static_inv_all ]
    [ boost_contract_build.subdir-run public_function :
            decl_entry_static_inv_ends ]
    [ boost_contract_build.subdir-run public_function :
            decl_entry_static_inv_mid ]
    [ boost_contract_build.subdir-run public_function :
            decl_entry_static_inv_none ]
    
    [ boost_contract_build.subdir-run public_function :
            decl_exit_static_inv_all ]
    [ boost_contract_build.subdir-run public_function :
            decl_exit_static_inv_ends ]
    [ boost_contract_build.subdir-run public_function :
            decl_exit_static_inv_mid ]
    [ boost_contract_build.subdir-run public_function :
            decl_exit_static_inv_none ]
    
    [ boost_contract_build.subdir-run public_function : decl_entry_inv_all ]
    [ boost_contract_build.subdir-run public_function : decl_entry_inv_ends ]
    [ boost_contract_build.subdir-run public_function : decl_entry_inv_mid ]
    [ boost_contract_build.subdir-run public_function : decl_entry_inv_none ]
    
    [ boost_contract_build.subdir-run public_function : decl_exit_inv_all ]
    [ boost_contract_build.subdir-run public_function : decl_exit_inv_ends ]
    [ boost_contract_build.subdir-run public_function : decl_exit_inv_mid ]
    [ boost_contract_build.subdir-run public_function : decl_exit_inv_none ]
    
    [ boost_contract_build.subdir-run public_function : access ]
    
    [ boost_contract_build.subdir-run public_function : ifdef ]
    [ boost_contract_build.subdir-run public_function : ifdef_macro ]

    [ boost_contract_build.subdir-run public_function : virtual ]
    [ boost_contract_build.subdir-run public_function : virtual_branch ]
    [ boost_contract_build.subdir-run public_function : virtual_sparse ]
    [ boost_contract_build.subdir-run public_function : virtual_access ]
    [ boost_contract_build.subdir-run public_function : virtual_access_multi ]
    [ boost_contract_build.subdir-run public_function : old_virtual ]

    [ boost_contract_build.subdir-run public_function : protected ]
    [ boost_contract_build.subdir-compile-fail public_function :
            protected_error ]
    [ boost_contract_build.subdir-run public_function : friend ]
    
    [ boost_contract_build.subdir-run public_function : throwing_pre ]
    [ boost_contract_build.subdir-run public_function : throwing_old ]
    [ boost_contract_build.subdir-run public_function : throwing_body ]
    [ boost_contract_build.subdir-run public_function : throwing_body_virtual ]
    [ boost_contract_build.subdir-run public_function :
            throwing_body_virtual_branch ]
    [ boost_contract_build.subdir-run public_function : throwing_post ]
    # No throwing_except test (because throwing twice calls terminate).
    
    [ boost_contract_build.subdir-run public_function : max_args0 ]
    [ boost_contract_build.subdir-run public_function : max_args0_no_tva ]
    [ boost_contract_build.subdir-run public_function : max_args1 ]
    [ boost_contract_build.subdir-run public_function : max_args1_no_tva ]
    [ boost_contract_build.subdir-run public_function : max_args2 ]
    [ boost_contract_build.subdir-run public_function : max_args2_no_tva ]
    [ boost_contract_build.subdir-run public_function : max_args ]
    [ boost_contract_build.subdir-run public_function : max_args_no_tva ]
    
    [ boost_contract_build.subdir-run public_function : max_bases ]
    
    [ boost_contract_build.subdir-run public_function : overload ]
    [ boost_contract_build.subdir-run public_function : overload_no_tva ]

    [ boost_contract_build.subdir-compile-fail public_function :
            override_error ]
    [ boost_contract_build.subdir-run public_function : override_permissive ]
    
    [ boost_contract_build.subdir-run public_function : static ]
    
    [ boost_contract_build.subdir-run public_function : static_ifdef ]
    [ boost_contract_build.subdir-run public_function : static_ifdef_macro ]

    [ boost_contract_build.subdir-run public_function : static_throwing_pre ]
    [ boost_contract_build.subdir-run public_function : static_throwing_old ]
    [ boost_contract_build.subdir-run public_function : static_throwing_body ]
    [ boost_contract_build.subdir-run public_function : static_throwing_post ]
    # No throwing_except test (because throwing twice calls terminate).
;
    
test-suite invariant :
    [ boost_contract_build.subdir-run invariant : decl_static_cv_const ]
    [ boost_contract_build.subdir-run invariant : decl_static_cv ]
    [ boost_contract_build.subdir-run invariant : decl_cv_const ]
    [ boost_contract_build.subdir-run invariant : decl_static_const ]
    [ boost_contract_build.subdir-run invariant : decl_static ]
    [ boost_contract_build.subdir-run invariant : decl_cv ]
    [ boost_contract_build.subdir-run invariant : decl_const ]
    [ boost_contract_build.subdir-run invariant : decl_nothing ]
    
    [ boost_contract_build.subdir-run invariant : ifdef ]
    [ boost_contract_build.subdir-run invariant : ifdef_macro ]

    [ boost_contract_build.subdir-compile-fail invariant :
            static_mutable_error ]
    [ boost_contract_build.subdir-run invariant : static_mutable_permissive ]
    [ boost_contract_build.subdir-compile-fail invariant : static_const_error ]
    [ boost_contract_build.subdir-run invariant : static_const_permissive ]
    [ boost_contract_build.subdir-compile-fail invariant :
            static_volatile_error ]
    [ boost_contract_build.subdir-run invariant : static_volatile_permissive ]
    [ boost_contract_build.subdir-compile-fail invariant : static_cv_error ]
    [ boost_contract_build.subdir-run invariant : static_cv_permissive ]
    
    [ boost_contract_build.subdir-compile-fail invariant : static_error ]
    [ boost_contract_build.subdir-run invariant : static_permissive ]
    [ boost_contract_build.subdir-compile-fail invariant : mutable_error ]
    [ boost_contract_build.subdir-run invariant : mutable_permissive ]
    [ boost_contract_build.subdir-compile-fail invariant : volatile_error ]
    [ boost_contract_build.subdir-run invariant : volatile_permissive ]
;

test-suite function :
    [ boost_contract_build.subdir-run function : smoke ]

    [ boost_contract_build.subdir-run function : decl_pre_all ]
    [ boost_contract_build.subdir-run function : decl_pre_none ]
    
    [ boost_contract_build.subdir-run function : decl_post_all ]
    [ boost_contract_build.subdir-run function : decl_post_none ]

    [ boost_contract_build.subdir-run function : ifdef ]
    [ boost_contract_build.subdir-run function : ifdef_macro ]

    [ boost_contract_build.subdir-run function : throwing_pre ]
    [ boost_contract_build.subdir-run function : throwing_old ]
    [ boost_contract_build.subdir-run function : throwing_body ]
    [ boost_contract_build.subdir-run function : throwing_post ]
    # No throwing_except test (because throwing twice calls terminate).
;

test-suite check :
    [ boost_contract_build.subdir-run check : decl_class ]
    [ boost_contract_build.subdir-run check : decl_macro ]
    
    [ boost_contract_build.subdir-run check : ifdef ]
    [ boost_contract_build.subdir-run check : ifdef_macro ]
    
    [ boost_contract_build.subdir-run check : audit ]
    [ boost_contract_build.subdir-compile-fail check : audit_error ]
    [ boost_contract_build.subdir-run check : audit_disabled ]
    [ boost_contract_build.subdir-compile-fail check : audit_disabled_error ]
    [ boost_contract_build.subdir-run check : axiom ]
    [ boost_contract_build.subdir-compile-fail check : axiom_error ]
;

test-suite result :
    [ boost_contract_build.subdir-run result : mixed_optional ]
    [ boost_contract_build.subdir-run result : mixed_optional_ref ]

    [ boost_contract_build.subdir-compile-fail result : type_mismatch_error ]
;

test-suite old :
    [ boost_contract_build.subdir-run old : auto ]

    [ boost_contract_build.subdir-run old : no_macro ]
    [ boost_contract_build.subdir-run old : no_macro_if_copyable ]

    [ boost_contract_build.subdir-compile-fail old : no_make_old_error ]
    [ boost_contract_build.subdir-compile-fail old :
            no_make_old_if_copyable_error ]

    [ boost_contract_build.subdir-run old : if_copyable ]
    [ boost_contract_build.subdir-compile-fail old : if_copyable_error ]
    [ boost_contract_build.subdir-run old : if_copyable_macro ]
    
    [ boost_contract_build.subdir-run old : copyable_traits ]
;

test-suite disable :
    [ boost_contract_build.subdir-run disable : pre_disable_no_assertion_prog ]
    [ boost_contract_build.subdir-run disable :
            assertions_disable_assertions_prog ]

    [ boost_contract_build.subdir-lib disable : lib_a :
            <link>shared:<define>BOOST_CONTRACT_TEST_LIB_A_DYN_LINK ]
    [ boost_contract_build.subdir-lib disable : lib_b : <library>disable-lib_a
            <link>shared:<define>BOOST_CONTRACT_TEST_LIB_B_DYN_LINK ]
    [ boost_contract_build.subdir-run disable
        : assertions_disable_assertions_lib
        : <library>disable-lib_a <library>disable-lib_b
    ]
    
    [ boost_contract_build.subdir-lib disable : lib_x :
            <link>shared:<define>BOOST_CONTRACT_TEST_LIB_X_DYN_LINK ]
    [ boost_contract_build.subdir-lib disable : lib_y : <library>disable-lib_x
            <link>shared:<define>BOOST_CONTRACT_TEST_LIB_Y_DYN_LINK ]
    [ boost_contract_build.subdir-run disable : always_disable_post_except_lib :
            <library>disable-lib_x <library>disable-lib_y ]
    
    [ boost_contract_build.subdir-run disable : audit ]
    [ boost_contract_build.subdir-compile-fail disable : audit_error ]
    [ boost_contract_build.subdir-run disable : audit_disabled ]
    [ boost_contract_build.subdir-compile-fail disable : audit_disabled_error ]
    [ boost_contract_build.subdir-run disable : axiom ]
    [ boost_contract_build.subdir-compile-fail disable : axiom_error ]
;

test-suite specify :
    [ boost_contract_build.subdir-run specify : pre_old_post_except ]
    
    [ boost_contract_build.subdir-run specify : pre_old_post ]
    [ boost_contract_build.subdir-run specify : pre_old_except ]
    [ boost_contract_build.subdir-run specify : pre_post_except ]
    [ boost_contract_build.subdir-run specify : old_post_except ]

    [ boost_contract_build.subdir-run specify : pre_old ]
    [ boost_contract_build.subdir-run specify : pre_post ]
    [ boost_contract_build.subdir-run specify : pre_except ]
    [ boost_contract_build.subdir-run specify : old_post ]
    [ boost_contract_build.subdir-run specify : old_except ]
    [ boost_contract_build.subdir-run specify : post_except ]

    [ boost_contract_build.subdir-run specify : pre ]
    [ boost_contract_build.subdir-run specify : old ]
    [ boost_contract_build.subdir-run specify : post ]
    [ boost_contract_build.subdir-run specify : except ]

    [ boost_contract_build.subdir-run specify : nothing ]
    
    [ boost_contract_build.subdir-compile-fail specify : except_post_error ]
    [ boost_contract_build.subdir-compile-fail specify : except_old_error ]
    [ boost_contract_build.subdir-compile-fail specify : except_pre_error ]
    [ boost_contract_build.subdir-compile-fail specify : post_old_error ]
    [ boost_contract_build.subdir-compile-fail specify : post_pre_error ]
    [ boost_contract_build.subdir-compile-fail specify : old_pre_error ]
    
    [ boost_contract_build.subdir-run specify : missing_check ]

    [ boost_contract_build.subdir-compile-fail specify : auto_error ]
    [ boost_contract_build.subdir-compile-fail specify : auto_pre_error ]
    [ boost_contract_build.subdir-compile-fail specify : auto_pre_old_error ]
    [ boost_contract_build.subdir-compile-fail specify :
            auto_pre_old_post_error ]
    [ boost_contract_build.subdir-compile-fail specify :
            auto_pre_old_post_except_error ]
;

test-suite call_if :
    [ boost_contract_build.subdir-run call_if : true_ ]
    [ boost_contract_build.subdir-run call_if : false_ ]

    [ boost_contract_build.subdir-run call_if : true_void ]
    [ boost_contract_build.subdir-run call_if : false_void ]
    
    [ boost_contract_build.subdir-run call_if : equal_to ]
    [ boost_contract_build.subdir-run call_if : equal_to_cxx14 :
            <toolset>clang:<cxxflags>-std=c++1y ] # Requires C++14 gen lambdas.
    
    [ boost_contract_build.subdir-run call_if : no_equal_condition_if ]
    [ boost_contract_build.subdir-run call_if : no_equal_call_if ]
    [ boost_contract_build.subdir-compile-fail call_if : no_equal_error ]
;

