<?xml version="1.0" encoding="utf-8"?>
<explicit-failures-markup>
    <!-- contract -->
    <library name="contract">
        <mark-unusable>
            <toolset name="clang-gnu-linux-3.0~c++11"/>
            <toolset name="clang-gnu-linux-3.0~gnu11"/>
            <toolset name="clang-gnu-linux-3.0~c++11~O2"/>
            <toolset name="clang-gnu-linux-3.0~c++11~warn"/>
            <note author="Lorenzo Caminiti">
                Tests fails on this compiler because it does not properly
                implement lambda functions (most tests use lambda functions,
                even if technically the library itself does not require C++11).
                This seems to be fixed in Clang 3.1 (see
                https://bugs.llvm.org/show_bug.cgi?id=16312).
            </note>
        </mark-unusable>
        <mark-unusable>
            <toolset name="gcc-gnu-6"/>
            <note author="Lorenzo Caminiti">
                Tests fail to link on this compiler when libc++ is used, but
                they link fine with libstdc++ (unfortunately these toolset names
                do not diferentiate between libc++ and libstdc++ so libstdc++
                tests had to be marked as expected failures for this compiler
                as well even if they actually compile and run fine).
            </note>
        </mark-unusable>
        <mark-expected-failures>
            <test name="specify-auto_error"/>
            <test name="specify-auto_pre_error"/>
            <test name="specify-auto_pre_old_error"/>
            <test name="specify-auto_pre_old_post_error"/>
            <test name="specify-auto_pre_old_post_except_error"/>
            <toolset name="clang-gnu-linux-4.0~gnu++1z"/>
            <toolset name="clang-gnu-linux-5.0~c++1z"/>
            <toolset name="clang-gnu-linux-5.0~gnu1z"/>
            <toolset name="clang-gnu-linux-5.0~c++1z~O2"/>
            <toolset name="clang-gnu-linux-5.0~c++1z~warn"/>
            <toolset name="gcc-gnu-7~c++1z"/>
            <toolset name="gcc-gnu-7~gnu1z"/>
            <toolset name="gcc-gnu-7~c++1z~O2"/>
            <toolset name="gcc-gnu-7~c++1z~warn"/>
            <toolset name="clang-gnu-linux-5.0~c++1z"/>
            <toolset name="clang-gnu-linux-6.0~c++1z"/>
            <toolset name="gcc-gnu-7~c++1z"/>
            <note author="Lorenzo Caminiti">
                This test fails because C++17 guarantees no copies on function
                returns by value (so this library can only give run-time errors,
                and not compile-time errors, if auto declarations are misused
                instead of using the `boost::contract::check` type explicitly on
                C++17 compilers).
            </note>
        </mark-expected-failures>
        <mark-expected-failures>
            <test name="old-if_copyable"/>
            <test name="old-if_copyable_macro"/>
            <toolset name="gcc-gnu-4.7.2"/>
            <toolset name="gcc-gnu-4.7~c++11"/>
            <toolset name="gcc-mngw-gnu-4.6c+"/>
            <toolset name="gcc-mngw-gnu-4.7c+"/>
            <toolset name="msvc-10.0"/>
            <toolset name="msvc-11.0"/>
            <note author="Lorenzo Caminiti">
                This test fails because this complier does not properly
                implement SFINAE giving incorrect errors on substituion failures
                for private and protected members.
                This seems to be fixed in GCC 4.8 and MSVC 12.0.
            </note>
        </mark-expected-failures>
        <mark-expected-failures>
            <test name="public_function-virtual_access_multi"/>
            <toolset name="gcc-gnu-4.7.2"/>
            <toolset name="gcc-gnu-4.7~c++11"/>
            <toolset name="gcc-mngw-gnu-4.6c+"/>
            <toolset name="gcc-mngw-gnu-4.7c+"/>
            <note author="Lorenzo Caminiti">
                This test fails because this compiler seems to incorrectly check
                access level of members in base classes in a context when only
                dervied class members are used.
                This seems to be fixed in GCC 4.8 (possibly related to
                https://gcc.gnu.org/bugzilla/show_bug.cgi?id=57973).
            </note>
        </mark-expected-failures>
        <mark-expected-failures>
            <test name="constructor-smoke"/>
            <toolset name="msvc-10.0"/>
            <note author="Lorenzo Caminiti">
                This test fails because of a MSVC 10.0 bug for lambdas within
                template class initialization list.
                This can be worked around using a functor bind instead of a
                lambda, but it is fixed in MSVC 11.0.
            </note>
        </mark-expected-failures>
    </library>
</explicit-failures-markup>
